New PolyCheck NOTES:

TODO:

- Add to check to make sure max number of versions fits in bitwidth available

DONE - Add check that cardinality fits in space available for each. Do we need this if the max cardinality fits? - NO

DONE - See if we need all the calls to num_bits. Preferably have them only in prolog and epilog.

DONE - Check the array ids

DONE - Evaluate application-level lvalue expressions exactly once (to avoid duplicated side effects)

- lvalue expression evaluation order that respects C/C++ sequencing rules

- Consider scenarios where some cardinalities are non-affine

DONE - Should the write update be qualified by the diff variable? As in, what is many statement candidates return _dx = 0 (x=0,1,..)
-- should be fine. all these statements will be equivalent. See point about redundant execution in the input program.

MAYBE DONE - Are multi-statement checks handled correctly?

- Some support to handle redundancy in input program?

- Special handling of copy operations in target program. 

- Can the source program have copy operations? How is it handled?

- Any support for associativity?

- Selective elimination of loop variables from polyhedra

------------------- old--------------------------

clang is used by pet to generate isl info 

ROSE: polyopt - extract scop and give isl info

polyopt- generate transformed source

high,mid,low level AST rewrite mechanism - rewrite.h - can we use ?

SageBuilder - the solid, recommended way

TODO:

- Include version information on the written array reference in computing 
  statement instance -- DONE

- Check write version numbers in inline checks as well -- DONE

- Add support when multiple statements in source program match a statement in the
  transformed program. Needed for ludcmp, cholesky, and fdtd. -- DONE

- Add support to properly detect and terminate out of non-terminating 
  transformed programs (that generate operations to be checked). -- 
  Non-essential feature

- Handle integer overflow possibility in version number computation. -- DONE
- Support for kills to handle intermediate variables (to some extent) 
(needed for gramschmidt and symm)

- Ensure variables in polynomial match the loop variables (shows up in epilog of
 x-eliminated cholseky). Need to use preprocessor macros rather than inlining 
 the polynomial expression. -- DONE

Not working - do not generate pc_test files:
- adi - Error: unable to create pw_aff for dimension 1
  -- This seems an ISL bug. Have a minimal test case. Need to Send to Sven.
- gramschmidt, symm:
  - Error: map is not single valued. maynot be convertible to pwaff for dimension 0.

UPDATED
- All other tests pass

---old status below

- run fails (assert _diff == 0 failed) - correlation
  - Two statements are causing the problem. The statement with the ternary operator and the 'symmat[j1][j1]=0.0' statement.
- compile errors:
  - fdtd-apml - fix double insert, then fails assertion _diff == 0
  - cholesky, ludcmp - PolyCheck crash (seg fault or double free)

-----

OLD Running the generated code:
 - run fails (assert _diff == 0 failed) - covariance, seidel-2d, correlation, jacobi-1d-imper
   -- Of these only correlation fails now. correlation segfaults when running Polycheck
- compile errors: 
  cholesky, fdtd-apml, ludcmp - fix double insert, still fails with manual fix 
